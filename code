import cv2, pytesseract, sqlite3, time
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from contextlib import closing
from kivy.logger import Logger
from isbntools.app import *
from pyzbar import pyzbar

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

Builder.load_string('''
<CameraClick>:
    orientation: 'vertical'
    Camera:
        id: camera
        resolution: (640, 480)
        play: True
    Button:
        text: 'Read from image'
        size_hint_y: None
        height: '48dp'
        on_press: root.capture()
    Button:
        text: 'Scan barcode'
        size_hint_y: None
        height: '48dp'
''')

class CameraClick(BoxLayout):
    def capture(self):
        camera = self.ids['camera']
        timestr = time.strftime("%Y%m%d_%H%M%S")
        camera.export_to_png("IMG_{}.png".format(timestr))
        image = cv2.imread("IMG_{}.png".format(timestr))
        read_from_image(image)
    
    def barcode_capture(self):
        camera = self.ids['camera']
        timestr = time.strftime("%Y%m%d_%H%M%S")
        camera.export_to_png("IMG_{}.png".format(timestr))
        image = cv2.imread("IMG_{}.png".format(timestr))
        read_from_barcode(image)


class Application(App):
    def build(self):
        return CameraClick()

def read_from_image(image):
    book_number = 0
    img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    img = cv2.GaussianBlur(img, (3, 3), 0)
    img = cv2.Canny(img, 10, 250)

    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
    img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)

    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for contour in contours:
        peri = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
        if len(approx) == 4:
            x_max = 0
            x_min = 10 ** 6
            y_max = 0
            y_min = 10 ** 6
            for x in range(len(contour)):
                if contour[x][0][0] < y_min:
                    y_min = contour[x][0][0]
                if contour[x][0][0] > y_max:
                    y_max = contour[x][0][0]
                if contour[x][0][1] < x_min:
                    x_min = contour[x][0][1]
                if contour[x][0][1] > x_max:
                    x_max = contour[x][0][1]
            book = image[x_min:x_max, y_min:y_max]

            book = cv2.resize(book, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)
            text = pytesseract.image_to_string(book).split()

            if len(text) > 0:
                for i in range(len(text)):
                    text[i] = remove_non_ascii(text[i])

            book_info = []

            command = "select name, key"
            number = 0
            order_by = 'w1'
            for number_of_cases in range(number + 2):
                if number_of_cases > 1:
                    order_by = order_by + '+w' + str(number_of_cases)
            for word in text:
                number += 1
                command = command + ", case when name like '%" + word + "%' then 0 else 1 end as w" + str(number)
            command = command + ' from authors order by ' + order_by + ' limit 1;'
            conn = sqlite3.connect("authors.db", isolation_level=None)
            conn.row_factory = sqlite3.Row
            with closing(conn.cursor()) as cursor:
                for row in cursor.execute(command):
                    author_info = [row['name'], row['key']]

            command = 'select title, main_author'
            number = 0
            for word in text:
                number += 1
                command = command + ", case when title like '%" + word + "%' then 0 else 1 end as w" + str(number)
            order_by = 'w1'
            for number_of_cases in range(number + 2):
                if number_of_cases > 1:
                    order_by = order_by + '+w' + str(number_of_cases)
            number += 1
            command = command + ", case when main_author='" + author_info[1] + "' then 0 else " + str(number//3) + ' end as w' + str(number) + ' from works order by ' + order_by + ' limit 1;'
            conn = sqlite3.connect("books.db", isolation_level=None)
            conn.row_factory = sqlite3.Row
            with closing(conn.cursor()) as cursor:
                for row in cursor.execute(command):
                    book_info = [row['title'], row['main_author']]

            get_isbn = isbn_from_words(book_info[0])
            if len(get_isbn) != 0:
                print(registry.bibformatters['labels'](meta(get_isbn)))
            else:
                Logger.exception('Database error: BibTex citation not found. Name and author:', book_info)
            book_number += 1
    if book_number == 0:
        Logger.exception('0 books found. Please try to adjust your background.')


def remove_non_ascii(text):
    return ''.join([i if ord(i) < 128 else '_' for i in text])

def read_from_barcode(image):
    barcodes = pyzbar.decode(image)
    for barcode in barcodes:
        isbn = str(barcode.data)
        isbn = isbn.replace('b', '')
        isbn = isbn.replace("'", "")
        print(registry.bibformatters['labels'](meta(isbn)))

Application().run()
